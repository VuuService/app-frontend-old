/* tslint:disable */
/* eslint-disable */
/**
 * Vuu ERP API
 * The Vuu ERP API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddStockDto } from '../models';
// @ts-ignore
import { ChangeStatusStockDto } from '../models';
// @ts-ignore
import { CustomSearchStockDto } from '../models';
// @ts-ignore
import { UpdateStockDto } from '../models';
/**
 * StockApi - axios parameter creator
 * @export
 */
export const StockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {ChangeStatusStockDto} changeStatusStockDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerActivateToStock: async (id: string, changeStatusStockDto: ChangeStatusStockDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stockControllerActivateToStock', 'id', id)
            // verify required parameter 'changeStatusStockDto' is not null or undefined
            assertParamExists('stockControllerActivateToStock', 'changeStatusStockDto', changeStatusStockDto)
            const localVarPath = `/stock/activateToStock/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeStatusStockDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddStockDto} addStockDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerAddStock: async (addStockDto: AddStockDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addStockDto' is not null or undefined
            assertParamExists('stockControllerAddStock', 'addStockDto', addStockDto)
            const localVarPath = `/stock/addStock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addStockDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stock/getAllStocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stockControllerFindOne', 'id', id)
            const localVarPath = `/stock/getStock/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerGetStockByCategory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stockControllerGetStockByCategory', 'id', id)
            const localVarPath = `/stock/getStockByCategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stockControllerRemove', 'id', id)
            const localVarPath = `/stock/deleteStock/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerSearchStockByCustom: async (content: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'content' is not null or undefined
            assertParamExists('stockControllerSearchStockByCustom', 'content', content)
            const localVarPath = `/stock/searchStockByCustom/{content}`
                .replace(`{${"content"}}`, encodeURIComponent(String(content)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key 
         * @param {CustomSearchStockDto} customSearchStockDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerSearchStockByKey: async (key: string, customSearchStockDto: CustomSearchStockDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('stockControllerSearchStockByKey', 'key', key)
            // verify required parameter 'customSearchStockDto' is not null or undefined
            assertParamExists('stockControllerSearchStockByKey', 'customSearchStockDto', customSearchStockDto)
            const localVarPath = `/stock/searchStockByKey/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customSearchStockDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStockDto} updateStockDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerUpdate: async (id: string, updateStockDto: UpdateStockDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stockControllerUpdate', 'id', id)
            // verify required parameter 'updateStockDto' is not null or undefined
            assertParamExists('stockControllerUpdate', 'updateStockDto', updateStockDto)
            const localVarPath = `/stock/updateStock/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStockDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StockApi - functional programming interface
 * @export
 */
export const StockApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StockApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {ChangeStatusStockDto} changeStatusStockDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockControllerActivateToStock(id: string, changeStatusStockDto: ChangeStatusStockDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockControllerActivateToStock(id, changeStatusStockDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddStockDto} addStockDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockControllerAddStock(addStockDto: AddStockDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockControllerAddStock(addStockDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockControllerGetStockByCategory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockControllerGetStockByCategory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockControllerSearchStockByCustom(content: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockControllerSearchStockByCustom(content, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} key 
         * @param {CustomSearchStockDto} customSearchStockDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockControllerSearchStockByKey(key: string, customSearchStockDto: CustomSearchStockDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockControllerSearchStockByKey(key, customSearchStockDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStockDto} updateStockDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockControllerUpdate(id: string, updateStockDto: UpdateStockDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockControllerUpdate(id, updateStockDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StockApi - factory interface
 * @export
 */
export const StockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StockApiFp(configuration)
    return {
        /**
         * 
         * @param {StockApiStockControllerActivateToStockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerActivateToStock(requestParameters: StockApiStockControllerActivateToStockRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stockControllerActivateToStock(requestParameters.id, requestParameters.changeStatusStockDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StockApiStockControllerAddStockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerAddStock(requestParameters: StockApiStockControllerAddStockRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stockControllerAddStock(requestParameters.addStockDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerFindAll(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stockControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StockApiStockControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerFindOne(requestParameters: StockApiStockControllerFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stockControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StockApiStockControllerGetStockByCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerGetStockByCategory(requestParameters: StockApiStockControllerGetStockByCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stockControllerGetStockByCategory(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StockApiStockControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerRemove(requestParameters: StockApiStockControllerRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stockControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StockApiStockControllerSearchStockByCustomRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerSearchStockByCustom(requestParameters: StockApiStockControllerSearchStockByCustomRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stockControllerSearchStockByCustom(requestParameters.content, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StockApiStockControllerSearchStockByKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerSearchStockByKey(requestParameters: StockApiStockControllerSearchStockByKeyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stockControllerSearchStockByKey(requestParameters.key, requestParameters.customSearchStockDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StockApiStockControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockControllerUpdate(requestParameters: StockApiStockControllerUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stockControllerUpdate(requestParameters.id, requestParameters.updateStockDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for stockControllerActivateToStock operation in StockApi.
 * @export
 * @interface StockApiStockControllerActivateToStockRequest
 */
export interface StockApiStockControllerActivateToStockRequest {
    /**
     * 
     * @type {string}
     * @memberof StockApiStockControllerActivateToStock
     */
    readonly id: string

    /**
     * 
     * @type {ChangeStatusStockDto}
     * @memberof StockApiStockControllerActivateToStock
     */
    readonly changeStatusStockDto: ChangeStatusStockDto
}

/**
 * Request parameters for stockControllerAddStock operation in StockApi.
 * @export
 * @interface StockApiStockControllerAddStockRequest
 */
export interface StockApiStockControllerAddStockRequest {
    /**
     * 
     * @type {AddStockDto}
     * @memberof StockApiStockControllerAddStock
     */
    readonly addStockDto: AddStockDto
}

/**
 * Request parameters for stockControllerFindOne operation in StockApi.
 * @export
 * @interface StockApiStockControllerFindOneRequest
 */
export interface StockApiStockControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof StockApiStockControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for stockControllerGetStockByCategory operation in StockApi.
 * @export
 * @interface StockApiStockControllerGetStockByCategoryRequest
 */
export interface StockApiStockControllerGetStockByCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof StockApiStockControllerGetStockByCategory
     */
    readonly id: string
}

/**
 * Request parameters for stockControllerRemove operation in StockApi.
 * @export
 * @interface StockApiStockControllerRemoveRequest
 */
export interface StockApiStockControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof StockApiStockControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for stockControllerSearchStockByCustom operation in StockApi.
 * @export
 * @interface StockApiStockControllerSearchStockByCustomRequest
 */
export interface StockApiStockControllerSearchStockByCustomRequest {
    /**
     * 
     * @type {string}
     * @memberof StockApiStockControllerSearchStockByCustom
     */
    readonly content: string
}

/**
 * Request parameters for stockControllerSearchStockByKey operation in StockApi.
 * @export
 * @interface StockApiStockControllerSearchStockByKeyRequest
 */
export interface StockApiStockControllerSearchStockByKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof StockApiStockControllerSearchStockByKey
     */
    readonly key: string

    /**
     * 
     * @type {CustomSearchStockDto}
     * @memberof StockApiStockControllerSearchStockByKey
     */
    readonly customSearchStockDto: CustomSearchStockDto
}

/**
 * Request parameters for stockControllerUpdate operation in StockApi.
 * @export
 * @interface StockApiStockControllerUpdateRequest
 */
export interface StockApiStockControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof StockApiStockControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateStockDto}
     * @memberof StockApiStockControllerUpdate
     */
    readonly updateStockDto: UpdateStockDto
}

/**
 * StockApi - object-oriented interface
 * @export
 * @class StockApi
 * @extends {BaseAPI}
 */
export class StockApi extends BaseAPI {
    /**
     * 
     * @param {StockApiStockControllerActivateToStockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockControllerActivateToStock(requestParameters: StockApiStockControllerActivateToStockRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).stockControllerActivateToStock(requestParameters.id, requestParameters.changeStatusStockDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StockApiStockControllerAddStockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockControllerAddStock(requestParameters: StockApiStockControllerAddStockRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).stockControllerAddStock(requestParameters.addStockDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockControllerFindAll(options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).stockControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StockApiStockControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockControllerFindOne(requestParameters: StockApiStockControllerFindOneRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).stockControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StockApiStockControllerGetStockByCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockControllerGetStockByCategory(requestParameters: StockApiStockControllerGetStockByCategoryRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).stockControllerGetStockByCategory(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StockApiStockControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockControllerRemove(requestParameters: StockApiStockControllerRemoveRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).stockControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StockApiStockControllerSearchStockByCustomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockControllerSearchStockByCustom(requestParameters: StockApiStockControllerSearchStockByCustomRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).stockControllerSearchStockByCustom(requestParameters.content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StockApiStockControllerSearchStockByKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockControllerSearchStockByKey(requestParameters: StockApiStockControllerSearchStockByKeyRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).stockControllerSearchStockByKey(requestParameters.key, requestParameters.customSearchStockDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StockApiStockControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockControllerUpdate(requestParameters: StockApiStockControllerUpdateRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).stockControllerUpdate(requestParameters.id, requestParameters.updateStockDto, options).then((request) => request(this.axios, this.basePath));
    }
}
